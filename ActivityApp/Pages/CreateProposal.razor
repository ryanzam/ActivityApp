@page "/CreateProposal"
@attribute [Authorize]
@using ActivityApp.Models
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject IProposalData propData
@inject IActivityData actData
@inject IUserData usrData

<div class="row">
	<div class="col-md-11">
		<h1>Propose your idea!</h1>
	</div>
	<div class="col-md-1"><span class="oi oi-x" @onclick="CloseCreateProposal"></span></div>
</div>
<div>
	@if(activities is not null)
	{
		<EditForm Model="proposal" OnValidSubmit="Create">
			<DataAnnotationsValidator/>
			<ValidationSummary/>
			<div class="mt-3">
				<label class="form-label" for="title">Proposal</label>
				<InputText class="form-control" id="title" @bind-Value="proposal.Title" aria-describedby="titleHelp"/>
				<div id="titleHelp" class="form-text">Enter your proposals title.</div>
			</div>
			<div class="mt-3">
				<label class="form-label" for="description">Description</label>
				<InputTextArea class="form-control" id="description" @bind-Value="proposal.Description" aria-describedby="desHelp"/>
				<div id="desHelp" class="form-text">Explain the idea in details.</div>
			</div>
			<div class="mt-3">
				<label class="form-label" for="activity">Select an activity</label>
				<InputSelect class="form-control" id="activity" @bind-Value="proposal.ActivityId" aria-describedby="activityHelp">
					@if(proposal.ActivityId is null)
					{
						<option selected value="">None</option>
					}
					@foreach(ActivityModel activity in activities)
					{
						<option value="@activity.Id">@activity.Name</option>
					}
					@if(proposal.ActivityId is not null)
					{
					<option value="">None</option>
					}
				</InputSelect>
				<div id="activityHelp" class="form-text">Select the activity type from drop down.</div>
			</div>
			<div class="mt-3">
				<button class="btn btn-outline-dark" type="submit">Post your proposal</button>
			</div>
		</EditForm>	
	}
</div>

@code {
	private CreateProposalModel proposal = new();
	private UserModel signInUser;
	private List<ActivityModel> activities;

	protected async override Task OnInitializedAsync()
	{
		activities = await actData.GetActivities();
		signInUser = await authProvider.GetUsrFromAuthentication(usrData);
	}

	private async Task Create()
	{
		ProposalModel p = new();
		p.Title = proposal.Title;
		p.Description = proposal.Description;
		p.Activity = activities.Where(a => a.Id == proposal.ActivityId).FirstOrDefault();
		p.Proposer = new SimpleUserModel(signInUser);

		await propData.CreateProposal(p);
		CloseCreateProposal();
	}

	private void CloseCreateProposal()
	{
		navManager.NavigateTo("/");
	}
}
